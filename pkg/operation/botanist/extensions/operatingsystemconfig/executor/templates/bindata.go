// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package templates generated by go-bindata.// sources:
// scripts/execute-cloud-config.tpl.sh
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsExecuteCloudConfigTplSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x5f\x73\xda\x48\x12\x7f\xd7\xa7\xe8\x28\x54\x6c\xb6\x3c\xb0\x49\xed\xdd\x03\xbb\xa4\x8e\x80\x92\xb8\x62\x83\x0b\xb0\xaf\xf6\x2e\x29\x32\x68\x1a\x33\x41\x9a\x51\x46\x23\x3b\x0e\xe6\xbb\x5f\xcd\x8c\x24\x0b\x10\xb6\x6f\xab\xf6\x09\x69\xd4\xf3\xeb\x3f\xd3\xfd\xeb\x1e\x5e\xbe\x68\xcf\xb9\x68\xcf\x69\xba\x04\x82\x99\xe7\x5d\xf4\xa6\x1f\x67\xfd\xb3\xd1\xe5\xa0\x3f\x1a\xbe\x3f\xfd\x30\x1b\x8c\xfe\x3d\x3c\x1b\xf5\x06\xc1\x78\x36\x09\xc6\x57\xc1\xb8\xeb\xaf\xd7\xd0\x4a\xa8\x5e\xf6\x15\x32\x14\x9a\xd3\x28\x9d\xa0\xba\x41\x05\x9b\x8d\xff\x28\x42\xbf\x37\xeb\x07\xe3\x69\x2d\x44\xbf\xd7\x47\xa5\x6b\x21\x1e\xe4\x07\xf2\x56\x44\x92\x32\x64\xfd\x48\x66\xac\x2f\xc5\x82\x5f\xd7\xab\x1d\x9d\x0d\xba\x7e\x63\xbd\xbb\xbe\x69\xc9\x88\x15\xe2\x1f\x83\xfe\xa7\xc9\xe5\x79\x2d\xfe\x12\xc3\x55\x9a\xc5\x15\xf0\xfe\x60\x36\xe9\x8f\x4f\x2f\xaa\xf6\xf7\x07\x93\x50\xf1\x44\xd7\x89\xd5\xe0\x97\xf2\x8f\xc1\x97\xfb\xb6\x7d\xd8\xff\x9e\xfb\x12\xaf\x18\x57\x40\x12\xd8\x73\x23\x1d\x70\x85\xa1\x96\xea\xce\xe8\x79\xf8\xfe\x29\x9b\x63\x84\x7a\xeb\xab\xe7\x2d\x32\x11\x6a\x2e\x05\x30\x19\xae\x50\x91\x44\xa1\x01\x39\x6e\xc2\xda\x03\x10\x34\xc6\xae\xdf\x78\xed\x7b\x00\x3c\xa6\xd7\xe6\xe5\x8d\x79\xc1\x70\x29\xc1\xb7\x0e\x71\x71\x0d\xb7\x4b\xd4\x4b\x54\xa0\x25\xe4\x00\xd0\x30\x7b\x61\xa1\x64\x0c\x0d\xbb\xd5\x62\x2c\xe0\xbf\x40\x7e\x42\xe3\xd8\xa9\x73\xa0\x29\x90\xef\xe0\xe7\x52\x4d\xf8\xf2\x3b\xe8\x25\x0a\x0f\xa0\xd0\x73\xe1\x30\x8d\xa6\x5a\x58\xc8\xad\x87\x24\x8b\xa2\x12\xc9\x98\x19\xa5\x58\xc1\x19\x4a\x10\x88\xec\x49\x33\x17\xdc\xdb\x78\xde\x7a\x6d\xec\x6d\xad\xf2\xb8\x51\x4d\xaf\x64\x94\xc5\x08\x64\xb3\x79\x88\xdb\x42\xaa\x98\x6a\xc2\xa8\xa6\x84\xe1\x0d\x0f\x31\x8f\xdd\x59\xef\x5d\x70\xd6\xfd\x74\xf9\x2e\x18\x04\x57\xce\xf7\x17\x30\x8f\x56\x9c\x01\x21\x11\x9d\x63\x04\x0d\x2b\x03\x6f\xdb\x0c\x6f\xda\x22\x8b\xa2\x8a\xe7\x83\xe0\xea\xb4\x1f\x4c\xba\x8d\xe3\x28\x9d\x47\x2b\x20\x6c\x9e\x8a\x0b\x20\x12\x86\xbd\xf3\xe0\xe4\xa2\x37\x9e\x4e\xff\xbc\x08\x4e\xde\x4f\xec\xcf\xe4\xf4\x3f\x41\xd3\x6e\x3c\xef\x4d\xfb\x1f\x4f\x87\x1f\x66\x0f\x08\xce\xfb\x46\xbe\xe0\xc3\x3d\x5c\x2b\x4c\xe0\xa8\x00\xe9\xfa\x7e\xeb\x17\x07\x64\x1f\x0d\x98\xcb\xdf\x3d\xe7\x5b\x29\xff\x89\x26\x75\x8e\x9a\x95\xc0\x9e\x53\x1d\x2e\xcd\xf1\xe4\xf2\x60\xc2\x01\x2e\x1c\x30\xbf\x03\xbb\xa9\x03\x8f\x23\x5a\xbc\x69\x6f\xfc\x21\x98\xe6\xb6\xcf\x8c\xab\x0f\xf6\xef\x7a\x66\x1c\x59\x22\x65\x40\xc4\x6b\xb8\x87\x30\xd3\x40\x16\x6f\x80\xb0\xcf\x7e\xd5\x38\x86\x1a\x43\x8d\xac\xd6\xb8\xc6\xbe\x42\x67\x48\xbc\x5a\xa4\x2d\xfc\xa1\x7f\x03\x72\x56\x1c\x14\x19\xc1\xf7\x4c\x6a\x0a\x24\x80\x88\xfe\xbc\x9b\x71\x4d\xe7\x11\xce\xb8\xe0\xba\xfb\xeb\x89\x5d\xfa\x26\x33\x25\x68\x54\xac\x59\x79\x7d\x97\x60\x37\x4b\x95\x7d\xe9\x5c\xab\xc4\x3d\x24\xea\x9b\x83\x03\x9b\x00\x35\xa6\x54\xbc\x70\x79\x66\xdc\xa0\x82\x81\xcd\x1f\x64\xcf\x75\xc5\x70\x45\x5b\xc7\x49\xfb\x86\xaa\x88\xcf\xc3\xc4\xad\xcb\x4c\xe8\x3c\x4f\x73\x0f\xf7\x85\x9c\x76\x2b\x6a\x2a\x07\xe3\x04\x42\x99\xdc\x81\x81\x34\xb4\xf1\x1c\x03\xc2\x04\x08\x05\x83\xdb\x8e\xf8\xbc\xfd\xcb\xb6\x9a\xb6\x95\xc9\x9c\x35\x87\x0c\x08\x65\xc2\x91\x95\x18\xa6\x84\x9f\xe7\x7b\x8d\x8f\x05\x06\x91\xc0\x70\x41\xb3\x48\xa7\x27\xc5\x59\x9c\xa0\x52\x52\xa5\x5d\x85\x76\x27\x51\xb2\x26\x0a\x25\xc2\xf3\x02\xe0\xe8\x64\x9f\x28\xbc\xf5\x9a\x00\x0a\x06\x1b\xc7\x36\x8a\x8a\x6b\x74\x8c\x74\x92\xb3\x11\x74\xba\xd0\x2a\x48\x72\xb3\xf1\xb6\x59\xda\x92\xbb\x63\xb0\x82\xea\xf3\x6d\xa6\x9c\xd6\xeb\x12\x3c\xa4\x1a\xfe\xf8\x03\x8e\x82\xd1\xfb\x23\xb8\x87\x39\x4d\xf1\x9f\xbf\x01\x61\xf0\x16\xfc\xc6\x6e\xb7\xb4\x3b\x5b\xe1\x43\xaf\xbd\x4c\x51\x99\x7a\x35\x50\xc1\xe8\xbd\xe7\x59\x1a\x7f\x01\x64\x51\xb3\xdb\xf4\x2f\xbf\xc2\xe1\x5a\x66\xe1\xf2\x90\x9c\xb7\xe0\x75\x68\xf5\x5d\xf1\x30\xea\x01\xf9\x12\xbd\x80\xdf\x69\x85\xe6\x27\xb4\x1e\x8e\x91\x46\x36\x84\x5f\xbe\xc0\xfd\xfd\xc1\x0d\xd5\xde\xd9\x4e\x56\xbc\x9d\x33\x0a\x09\x23\x8e\x42\x93\x30\x53\x0a\x85\x6e\x25\x18\x1b\xa8\xd2\x5a\x17\xfe\x60\xf4\xde\xc4\xfb\xa0\x11\xef\xa4\xd4\xa9\x56\x34\xb1\xa7\x47\x08\xf1\x68\xc2\xaf\x50\xa5\x5c\x8a\x0e\xdc\xbc\xf6\x56\x5c\xb0\x0e\xb8\x33\xf1\x72\x5d\x24\x94\x42\xe3\x0f\xdd\x29\xd8\x8d\xcc\x0b\x98\x7f\xe5\xc9\xed\x85\x51\x96\x6a\x54\x69\xc7\x23\x90\x3f\x77\x5c\x5d\xa2\xd2\x7c\xc1\x43\xaa\x91\xd0\x4c\x2f\xa5\xe2\xfa\xce\x66\x68\x07\x1a\xc7\xc6\xea\x9a\x73\xdb\x1f\xed\xfc\x87\x94\xba\x07\xad\x4c\x5e\x1d\x7d\x16\x79\x83\x48\xed\x94\xf8\x3c\x3c\x37\x6c\x5a\xf2\x36\x49\xdd\x81\xd2\x03\xe7\xa4\xf3\x20\x77\xd8\x79\x90\xbb\x53\x4a\x5a\x2a\x49\xcd\xca\x5e\x3c\x4a\xd4\xc3\x91\x32\x3b\xad\x92\x03\x82\x5e\x0e\x6e\xd5\xd0\x94\x98\x17\x82\x3f\xb4\xa2\x1d\x58\x6f\xec\xaa\x96\x2b\x14\xae\xd5\x95\xdb\xa6\x66\xad\xac\x9e\x7c\x28\x51\xf1\xe3\x39\xb9\x9d\x0e\x26\x95\x63\xf6\x0f\x33\x3d\xee\xcd\x86\x1b\x78\xbb\xbf\xf8\x30\x30\xda\x1a\x78\x01\x8c\x2f\xea\xea\xd5\x3f\x58\xc3\x0f\x63\x89\xa9\x89\x1d\x80\x7d\x3d\xfe\x93\xe5\x5b\x33\xe7\x38\x5e\x9d\x20\x0a\x10\x78\x8b\x0a\x2c\xed\x80\x8b\x00\xc8\x9d\x77\x66\x47\x5c\x86\x0a\x6e\x5c\x59\xe4\x33\xa5\x89\xa1\x63\x44\x57\x1c\x7d\x19\xc7\xd4\x52\xdf\xde\x28\x39\xc9\xc2\x10\xd3\x74\x91\x45\xd1\x1d\xd0\x24\x89\x4c\x57\x11\x78\xbb\xad\xa8\x02\x0f\x90\xde\xa5\x1a\xe3\x50\x47\xc0\x28\xc6\x52\x10\xa7\xca\xb2\x77\x85\xb2\x2d\x55\x67\x82\xeb\xd4\x9c\xb4\xf9\xc8\x17\xb6\x57\x1f\x8b\x42\xa2\x61\xbf\x0f\x69\x8c\x03\xcb\xe3\xcd\xda\x6f\x57\x54\x9d\xf1\xf9\xb9\xe9\x35\xf5\x02\x95\x6b\x50\x79\x77\x51\x4d\xa3\x75\xdb\x5c\x14\x66\x3a\x81\x4a\x8f\x80\x57\xaf\x2a\xdf\x15\xa6\x9a\x2a\x0d\x84\x08\x49\xe6\x91\x0c\x57\x55\xd9\x6a\x77\xaa\x3c\x1e\x08\x65\x8e\x65\xc6\x93\x28\x02\x17\x06\x85\x0b\x54\x28\x42\x64\xc0\x85\x39\x88\xad\x20\xb7\xca\xd9\xe0\xff\x48\xca\xdd\x2d\x7f\x21\x0d\x5d\x43\x36\xf5\xa4\xe2\x47\x55\xd7\x60\x7b\x5e\x6f\x38\x1c\x4d\x7b\xd3\xd3\xd1\x70\x36\x0e\x26\xd3\xde\x78\x3a\x9b\xfc\x39\x99\x06\xe7\x03\xcb\x5e\x76\xe0\xf6\x6f\xa5\x5a\xa1\x6a\x5d\x53\xc5\x50\xa0\x72\xbd\xb4\x9d\x87\x88\xb8\x03\x60\xc4\x30\x23\x0f\x31\xf5\x3d\xef\x25\x4c\xd5\x9d\x99\x69\x16\x5c\x30\x18\x4a\x86\x20\xe7\xdf\x30\xd4\xe6\x7a\x01\x7a\xc9\x53\x88\xa9\x99\xb0\x31\xef\x67\xcf\xed\x66\x65\xfe\xaf\xd7\x5f\x87\xa3\x41\xd0\xf5\x1b\xc7\x6d\x99\x68\xfb\x0f\x80\xa1\x37\x93\x07\x84\xac\xca\xbd\x5d\xff\xeb\x66\xf3\x14\xf2\x7a\xfd\xd5\x87\x6b\xd4\x20\x8c\xa5\x24\x02\xdf\x00\x28\x81\x1a\xd3\x16\x97\xed\xa5\x4c\xb5\xbd\x3a\x36\x8e\x8b\xc7\xa6\x6f\xc6\xad\x6b\x49\xcc\x04\x19\x51\x8d\xf6\x7e\x61\xee\x57\x5c\x63\x9c\x5a\x50\x38\xe6\x82\xe1\x8f\x62\xe9\xd7\x66\x2b\x46\x4d\x4d\x3b\x6a\xe5\x39\xe9\xb6\xe4\x62\x87\xa5\xa9\x10\x66\xea\xe6\x52\xa4\xf0\xd9\x6f\x3c\xe3\xcc\x3e\xfb\xa6\x7e\x4c\xfa\xff\x1d\xd8\xce\x72\x57\x40\xe5\x83\xdf\x34\xa1\xf6\xf2\x5b\xb1\x9d\x38\x7e\x82\xdf\x30\xa7\xb4\x75\x72\x00\x66\xc9\xde\x84\xfc\xf2\x2a\xe4\xa4\xee\x81\xde\xae\xe0\x68\x9d\x28\x2e\x34\x34\x5e\x6f\x8e\x9a\xae\x42\x76\x4d\x98\x4d\x47\x85\x79\x4f\x81\xbc\xc9\x41\x4c\x81\x00\xbc\x84\xcb\x84\x51\x8d\x10\xe6\xff\x5d\xb4\x6d\x2e\x13\x97\x0e\x76\x54\x80\x87\x88\x98\x79\xb8\x9a\xbc\x7c\x01\x89\x4c\x53\x3e\x8f\xb0\xce\x4d\x3b\x1f\x9b\x91\xeb\xd5\xab\x22\xa7\x1b\x5b\xff\xd1\xec\xc4\xe1\x89\xc4\x7d\xba\x1e\x72\x4b\xd1\xe5\x6d\xd5\x08\xff\xb0\x7f\xdd\xed\xc9\xa5\x30\xcd\x24\x34\x91\x37\xa8\x6e\x15\xd7\x58\x09\xd8\x38\x67\xd5\xbc\xcc\xa1\x28\x73\xe3\xbf\xc2\xef\x19\xa6\x1a\x99\x91\x97\xaa\xf8\x66\xe8\xb1\x3c\x95\x47\xce\xce\x1c\x56\x8a\x0c\xfc\xb4\x7d\xd2\x86\xf6\xb5\xdf\xfc\x1d\x58\xf5\x82\x92\xeb\x36\x37\xf1\x1d\xf5\xd0\x28\x1e\x58\x86\x86\x69\x9e\x93\xb9\x95\xa3\xdd\x6d\x85\x45\xef\xf0\x0b\x5c\xdf\x0c\x09\x5a\x65\x26\x14\x4c\x0a\xf3\xf3\x77\x9e\x57\x63\xfd\x0c\xfb\x37\xc4\x0e\x4e\xff\x0b\x00\x00\xff\xff\xe7\x6b\x08\x28\xf1\x14\x00\x00")

func scriptsExecuteCloudConfigTplShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsExecuteCloudConfigTplSh,
		"scripts/execute-cloud-config.tpl.sh",
	)
}

func scriptsExecuteCloudConfigTplSh() (*asset, error) {
	bytes, err := scriptsExecuteCloudConfigTplShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/execute-cloud-config.tpl.sh", size: 5361, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/execute-cloud-config.tpl.sh": scriptsExecuteCloudConfigTplSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"execute-cloud-config.tpl.sh": &bintree{scriptsExecuteCloudConfigTplSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
